name: zBeta - Identify Statistical Anomalies
updateFrequency: never
timeSelector: {}
sharedTimeInterval:
  enabled: true
  isLive: false
  start: 30d
widgets:
  604d29f3-97f8-40ac-931e-2ec0d8cfc4cc:
    x: 6
    y: 0
    height: 6
    queryString: |-
      wildcard(field=#event_simpleName, pattern=?event_simpleName, ignoreCase=true)

      // Create buckets to get the count, then rename a field so we recognize @timestamp again.
      | bucket(field=?GroupByValue, span=1d, limit=500)
      | @timestamp:=_bucket

      // Find the average number and calculate the standard deviation.
      | bucket(field=?GroupByValue, span=1d, function=[sum(_count, as=observedRequests), window([stdDev(_count), avg(_count)], span=?RollingAverageDays)], limit=500)

      // Remove irrelevant results.
      | _stddev > 0 | _avg > 0
      | regex(".+", field=?GroupByValue)

      // Calculate the upper and lower limits.
      | ulimit := _avg + (?AnomalyFactor * _stddev)

      // Flag hosts that exceed the standard deviation by X.
      | case {
          test(observedRequests > ulimit) | violation := 1;
          * | violation := 0;
        }

      // Round the numbers for formatting.
      | round(_avg) | round(ulimit)

      // Ignore anything that's noise.
      | violation > 0
      | _stddev > 1
      | _avg > 1
      | test(observedRequests > ulimit)

      // Add the date the spike occurred.
      | Time := formatTime("%Y-%m-%d", field=_bucket, locale=en_US, timezone=Z)

      | groupBy(?GroupByValue, function=[collect([Time, observedRequests, ulimit], limit=1000)], limit=max)
      | Observed:=rename(observedRequests)
      | UpperLimit:=rename(ulimit)
    visualization: table-view
    end: now
    start: 30d
    width: 6
    title: Calculate Statistical Deviations
    isLive: false
    type: query
  note-1671638791955-0:
    x: 0
    y: 0
    height: 3
    text: "This dashboard is designed to calculate statistical anomalies based on\
      \ standard deviations. The default window is 30 days with a 7-day rolling average.\
      \ Default values are provided for the parameter inputs. You can change these\
      \ as needed.\n\nThe `Event Name` and `Group By` drop-down values are displayed\
      \ based on frequency. It is recommended that you input your own values for the\
      \ specific use case, e.g. `UserLogonFailed2` for the \"Event Name\" and `UserName`\
      \ for the \"Group By\". "
    width: 6
    title: Details
    type: note
  note-1671639362972-1:
    x: 0
    y: 3
    height: 3
    text: "These are the input values that can be modified:\n\n- `AnomalyFactor`:\
      \ the number of standard deviations from the mean, e.g. `3`.\n- `EventSimpleName`:\
      \ the `#event_simpleName` value that the query should be applied to, e.g. `UserLogonFailed2`.\
      \ \n- `GroupByValue`: the value the results should be grouped by, e.g. `UserName`.\n\
      - `RollingAverageDays`: the number of days that should be used to calculate\
      \ a rolling average window, e.g. `7d` to compare each day to a 7-day rolling\
      \ average.  "
    width: 6
    title: Instructions
    type: note
$schema: https://schemas.humio.com/dashboard/v0.10.0
parameters:
  AnomalyFactor:
    label: Anomaly Factor
    order: 1
    type: list
    values:
    - '1'
    - '2'
    - '3'
    - '4'
    - '5'
  EventSimpleName:
    label: Event Name
    query: top(#event_simpleName)
    timeInterval: 1h
    useDashboardTimeIfSet: false
    type: query
    order: 1
    valueField: '#event_simpleName'
  GroupByValue:
    label: GroupBy
    query: fieldstats() | distinct > 1 | field!=/(^#|^@|^_|^id$|Id$|time|data|hash|^nonce$)/i
      | sort(distinct, limit=10)
    timeInterval: 1h
    useDashboardTimeIfSet: false
    type: query
    order: 50
    valueField: field
  RollingAverageDays:
    label: Rolling Average
    order: 50
    type: list
    values:
    - 4d
    - 8d
    - 3d
    - 6d
    - 5d
    - 7d
