name: Status Events - Linux Sensor Mode Status
visualization:
  options: {}
  type: table-view
$schema: https://schemas.humio.com/query/v0.1.0
timeInterval:
  isLive: false
  start: 7d
queryString: |-
  // Status Events - Linux Sensor Mode Status

  // Narrow the search to specific events on Linux.
  #event_simpleName=/(OsVersionInfo|ConfigStateUpdate|SensorHeartbeat)/
  | event_platform=Lin

  // Group the results by cid and aid pairs, and include the last details for each.
  | groupBy([cid, aid], function=([selectLast([ConfigStateData, OSVersionString, SensorStateBitMap])]))

  // Check the ConfigStateData for a specific value that indicates the mode.
  | ConfigStateData match {
      /1400000000c4/ => isInUserMode:="1" ;
      *              => isInUserMode:="0" ;
    }

  // Similar to the above, except to check the RFM state.
  | SensorStateBitMap match {
      2 => isInRFM:="1" ;
      0 => isInRFM:="0" ;
    }

  // Compare values created from above to determine if it's user mode, kernel mode, or RFM
  | case {
      isInUserMode=1 AND isInRFM=1 | status := "User Mode Enabled" ;
      isInUserMode=0 AND isInRFM=0 | status := "Kernel Mode Enabled" ;
      isInUserMode=0 AND isInRFM=1 | status := "RFM Enabled" ;
      * ;
  }

  // Extract details on the OS.
  | OSVersionString = /^Linux\s(?<hostname>\S+)\s(?<kernelVersion>\S+)\s/i

  // Uncomment if you'd like to exclude "Kernel Mode Enabled" results.
  //| status != "Kernel Mode Enabled"

  // Create input fields and filter the results.
  | wildcard(field=aid, pattern=?aid, ignoreCase=true)
  | wildcard(field=hostname, pattern=?hostname, ignoreCase=true)
  | wildcard(field=status, pattern=?status, ignoreCase=true)

  // Create shortened versions of the fields.
  | shortHostname:=format("%.20s...", field=hostname)
  | shortKernelVersion:=format("%.20s...", field=kernelVersion)

  // Top version shows the shortened names, bottom version shows the full names. Only have one uncommented.
  | table([aid, shortHostname, Version, shortKernelVersion, isInRFM, isInUserMode, status], limit=1000)
  //| table([aid, hostname, Version, kernelVersion, isInRFM, isInUserMode, status], limit=1000)
