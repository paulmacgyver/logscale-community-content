name: Fortinet_Fortigate
tests:
- date=2017-11-15 time=11:44:16 logid="0000000013" type="traffic" subtype="forward"
  level="notice" vd="vdom1" eventtime=1510775056 srcip=10.1.100.155 srcname="pc1"
  srcport=40772 srcintf="port12" srcintfrole="undefined" dstip=35.197.51.42 dstname="fortiguard.com"
  dstport=443 dstintf="port11" dstintfrole="undefined" poluuid="707a0d88-c972-51e7-bbc7-4d421660557b"
  sessionid=8058 proto=6 action="close" policyid=1 policytype="policy" policymode="learn"
  service="HTTPS" dstcountry="United States" srccountry="Reserved" trandisp="snat"
  transip=172.16.200.2 transport=40772 appid=40568 app="HTTPS.BROWSER" appcat="Web.Client"
  apprisk="medium" duration=2 sentbyte=1850 rcvdbyte=39898 sentpkt=25 rcvdpkt=37 utmaction="allow"
  countapp=1 devtype="Linux PC" osname="Linux" mastersrcmac="a2:e9:00:ec:40:01" srcmac="a2:e9:00:ec:40:01"
  srcserver=0 utmref=0-220586
fieldsToBeRemovedBeforeParsing: []
$schema: https://schemas.humio.com/parser/v0.2.0
script: |-
  // Fortinet FortiGate parser
  // bjorn.graabek@crowdstrike.com
  //
  // v0.3.0, initial work on making the parser ECS compliant. The parser keeps the original field names and adds ECS field equivalents
  // There are more fields to map to ECS fields. Fortigate log format is described here:
  // https://docs.fortinet.com/document/fortigate/7.4.0/fortios-log-message-reference/357866/log-message-fields
  // v0.2.0, timestamps weren't extracted correctly, timestamp extraction corrected. Choice between two different timestamps added
  // v0.1.0, initial parser made by ???

  // If events are received via syslog, there may be a priority number at the beginning which we have no need for
  replace("^\<[\d]+\>", with="") |
  kvParse() |

  // There are 2 different time stamps in Fortigate events.
  // The eventtime field records when the event was triggered.
  // the date, time and tz fields record when the event was recorded.
  // this parser uses the eventtime field and ignores the date, time and tz fields
  // extract @timestamp from eventtime field
  // some Fortigate eventtime fields have more digits than others
  case {
      regex("^(?<timestamp>.{13})", field=eventtime) | parseTimestamp(field=timestamp, format=unixtimeMillis);
      regex("^(?<timestamp>.{10})", field=eventtime) | parseTimestamp(field=timestamp, format=unixtime);
  * } |
  drop(timestamp) |

  // According to Fortigate docs, everything but deny means the session was allowed
  // despite the docs, surely the action="perf-stats" events have nothing to do with allowing/denying data, so hence event.type is not being set
  case {
      action=deny | event.type:="denied";
      action="perf-stats";
  * | event.type:="allowed" } |

  // LogScale PaSta fields
  Vendor:="fortinet" | logtype:="fortinet-firewall-log" |
  // ECS fields
  ecs.version:=8.8.0 | event.category:="network" | event.kind:="event" |
  destination.address:=dstip | destination.ip:=dstip | destination.port:=dstport | destination.mac:=dstmac | destination.geo.country_name:=dstcountry |
  source.address:=srcip | source.ip:=srcip | source.port:=srcport | source.mac:=srcmac | source.geo.country_name:=srccountry |
  network.iana_number:=proto | network.application:=lower(app) |
  // Computes the Community ID, a standard for hashing network flows. This can be used to easily correlate and join network flows across systems
  communityId(proto=network.iana_number,sourceip=source.ip,sourceport=source.port,destinationip=destination.ip,destinationport=destination.por,as=network.community_id) |
  source.bytes:=sentbyte | destination.bytes:=rcvdbyte | network.bytes:=source.bytes+destination.bytes |
  source.packets:=sentpkt | destination.packets:=rcvdpkt | network.packets:=source.packets+destination.packets |
  observer.type:="firewall" | observer.vendor:="Fortinet" |
  observer.ingress.interface.name:=srcintf | observer.egress.interface.name:=dstintf |
  log.level:=level
tagFields:
- Vendor
- logtype
